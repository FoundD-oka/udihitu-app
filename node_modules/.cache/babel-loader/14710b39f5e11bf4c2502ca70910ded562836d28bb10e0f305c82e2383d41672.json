{"ast":null,"code":"// characterData.js\nexport const loadCharacterData = async () => {\n  try {\n    const response = await fetch('/Mac_19_Hitu_Dictionary.txt');\n    const text = await response.text();\n    const lines = text.split('\\n');\n    const data = {};\n    lines.forEach(line => {\n      const match = line.match(/\"([^\"]+)\",\"([^\"]+) ([^\"]+)\",\"([^\"]+)\"/);\n      if (match) {\n        const [, reading, kanji, components, type] = match;\n        data[reading] = components.split(' ');\n      }\n    });\n    return data;\n  } catch (error) {\n    console.error('Error loading character data:', error);\n    return {};\n  }\n};\nexport const getRandomCharacter = characterData => {\n  const characters = Object.keys(characterData);\n  return characters[Math.floor(Math.random() * characters.length)];\n};\nexport const getStrokeCount = (char, characterData) => {\n  return characterData[char] ? characterData[char].length : 0;\n};","map":{"version":3,"names":["loadCharacterData","response","fetch","text","lines","split","data","forEach","line","match","reading","kanji","components","type","error","console","getRandomCharacter","characterData","characters","Object","keys","Math","floor","random","length","getStrokeCount","char"],"sources":["/Users/m1_mini/Git/udihitu-app/src/characterData.js"],"sourcesContent":["// characterData.js\nexport const loadCharacterData = async () => {\n  try {\n    const response = await fetch('/Mac_19_Hitu_Dictionary.txt');\n    const text = await response.text();\n    const lines = text.split('\\n');\n    const data = {};\n\n    lines.forEach(line => {\n      const match = line.match(/\"([^\"]+)\",\"([^\"]+) ([^\"]+)\",\"([^\"]+)\"/);\n      if (match) {\n        const [, reading, kanji, components, type] = match;\n        data[reading] = components.split(' ');\n      }\n    });\n\n    return data;\n  } catch (error) {\n    console.error('Error loading character data:', error);\n    return {};\n  }\n};\n\nexport const getRandomCharacter = (characterData) => {\n  const characters = Object.keys(characterData);\n  return characters[Math.floor(Math.random() * characters.length)];\n};\n\nexport const getStrokeCount = (char, characterData) => {\n  return characterData[char] ? characterData[char].length : 0;\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMC,IAAI,GAAG,CAAC,CAAC;IAEfF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MACpB,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,uCAAuC,CAAC;MACjE,IAAIA,KAAK,EAAE;QACT,MAAM,GAAGC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEC,IAAI,CAAC,GAAGJ,KAAK;QAClDH,IAAI,CAACI,OAAO,CAAC,GAAGE,UAAU,CAACP,KAAK,CAAC,GAAG,CAAC;MACvC;IACF,CAAC,CAAC;IAEF,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,CAAC,CAAC;EACX;AACF,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAIC,aAAa,IAAK;EACnD,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC;EAC7C,OAAOC,UAAU,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,UAAU,CAACM,MAAM,CAAC,CAAC;AAClE,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,IAAI,EAAET,aAAa,KAAK;EACrD,OAAOA,aAAa,CAACS,IAAI,CAAC,GAAGT,aAAa,CAACS,IAAI,CAAC,CAACF,MAAM,GAAG,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}