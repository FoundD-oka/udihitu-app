{"ast":null,"code":"var _jsxFileName = \"/Users/m1_mini/Git/udihitu-app/src/CharacterDisplay.js\";\nimport React from 'react';\nimport './CharacterDisplay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharacterDisplay = ({\n  character,\n  stage\n}) => {\n  // 文字とその表現方法のマッピング\n  const characterMap = {\n    'あ': ['唖', '娃', '阿']\n  };\n  const getDisplayCharacter = (char, stage) => {\n    if (characterMap[char]) {\n      const representations = characterMap[char];\n      if (stage === 0) {\n        // 完全な文字（全ての表現を表示）\n        return representations.join('');\n      } else if (stage <= representations.length) {\n        // 部分的な表示（stage数だけ表示）\n        return representations.slice(0, stage).join('');\n      }\n    }\n    return char; // マッピングがない場合は元の文字をそのまま返す\n  };\n  const displayChar = getDisplayCharacter(character, stage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-display\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"udihitu-font\",\n      children: displayChar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = CharacterDisplay;\nexport default CharacterDisplay;\nvar _c;\n$RefreshReg$(_c, \"CharacterDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CharacterDisplay","character","stage","characterMap","getDisplayCharacter","char","representations","join","length","slice","displayChar","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/m1_mini/Git/udihitu-app/src/CharacterDisplay.js"],"sourcesContent":["import React from 'react';\nimport './CharacterDisplay.css';\n\nconst CharacterDisplay = ({ character, stage }) => {\n  // 文字とその表現方法のマッピング\n  const characterMap = {\n    'あ': ['唖', '娃', '阿']\n  };\n\n  const getDisplayCharacter = (char, stage) => {\n    if (characterMap[char]) {\n      const representations = characterMap[char];\n      if (stage === 0) {\n        // 完全な文字（全ての表現を表示）\n        return representations.join('');\n      } else if (stage <= representations.length) {\n        // 部分的な表示（stage数だけ表示）\n        return representations.slice(0, stage).join('');\n      }\n    }\n    return char; // マッピングがない場合は元の文字をそのまま返す\n  };\n\n  const displayChar = getDisplayCharacter(character, stage);\n\n  return (\n    <div className=\"character-display\">\n      <span className=\"udihitu-font\">{displayChar}</span>\n    </div>\n  );\n};\n\nexport default CharacterDisplay;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAM,CAAC,KAAK;EACjD;EACA,MAAMC,YAAY,GAAG;IACnB,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;EACrB,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAACC,IAAI,EAAEH,KAAK,KAAK;IAC3C,IAAIC,YAAY,CAACE,IAAI,CAAC,EAAE;MACtB,MAAMC,eAAe,GAAGH,YAAY,CAACE,IAAI,CAAC;MAC1C,IAAIH,KAAK,KAAK,CAAC,EAAE;QACf;QACA,OAAOI,eAAe,CAACC,IAAI,CAAC,EAAE,CAAC;MACjC,CAAC,MAAM,IAAIL,KAAK,IAAII,eAAe,CAACE,MAAM,EAAE;QAC1C;QACA,OAAOF,eAAe,CAACG,KAAK,CAAC,CAAC,EAAEP,KAAK,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC;MACjD;IACF;IACA,OAAOF,IAAI,CAAC,CAAC;EACf,CAAC;EAED,MAAMK,WAAW,GAAGN,mBAAmB,CAACH,SAAS,EAAEC,KAAK,CAAC;EAEzD,oBACEH,OAAA;IAAKY,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAChCb,OAAA;MAAMY,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEF;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAACC,EAAA,GA3BIjB,gBAAgB;AA6BtB,eAAeA,gBAAgB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}