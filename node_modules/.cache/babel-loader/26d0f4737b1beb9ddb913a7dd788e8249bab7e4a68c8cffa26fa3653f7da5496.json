{"ast":null,"code":"var _jsxFileName = \"/Users/m1_mini/Git/udihitu-app/src/CharacterDisplay.js\";\nimport React from 'react';\nimport './CharacterDisplay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharacterDisplay = ({\n  character,\n  stage\n}) => {\n  // UDHituAStdフォントの文字コードマッピング（仮の実装）\n  const getCharacterCode = (char, stage) => {\n    const baseCode = char.charCodeAt(0);\n    switch (stage) {\n      case 0:\n        return String.fromCharCode(baseCode);\n      // 完全な文字\n      case 1:\n        return String.fromCharCode(baseCode + 1);\n      // 1画目が消えた状態\n      case 2:\n        return String.fromCharCode(baseCode + 2);\n      // 2画目が消えた状態\n      case 3:\n        return String.fromCharCode(baseCode + 3);\n      // 3画目が消えた状態\n      case 4:\n        return String.fromCharCode(baseCode + Math.floor(Math.random() * 3) + 1);\n      // ランダムに画が消えた状態\n      default:\n        return char;\n    }\n  };\n  const displayChar = getCharacterCode(character, stage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-display\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"udihitu-font\",\n      children: displayChar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = CharacterDisplay;\nexport default CharacterDisplay;\nvar _c;\n$RefreshReg$(_c, \"CharacterDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CharacterDisplay","character","stage","getCharacterCode","char","baseCode","charCodeAt","String","fromCharCode","Math","floor","random","displayChar","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/m1_mini/Git/udihitu-app/src/CharacterDisplay.js"],"sourcesContent":["import React from 'react';\nimport './CharacterDisplay.css';\n\nconst CharacterDisplay = ({ character, stage }) => {\n  // UDHituAStdフォントの文字コードマッピング（仮の実装）\n  const getCharacterCode = (char, stage) => {\n    const baseCode = char.charCodeAt(0);\n    switch (stage) {\n      case 0: return String.fromCharCode(baseCode);  // 完全な文字\n      case 1: return String.fromCharCode(baseCode + 1);  // 1画目が消えた状態\n      case 2: return String.fromCharCode(baseCode + 2);  // 2画目が消えた状態\n      case 3: return String.fromCharCode(baseCode + 3);  // 3画目が消えた状態\n      case 4: return String.fromCharCode(baseCode + Math.floor(Math.random() * 3) + 1);  // ランダムに画が消えた状態\n      default: return char;\n    }\n  };\n\n  const displayChar = getCharacterCode(character, stage);\n\n  return (\n    <div className=\"character-display\">\n      <span className=\"udihitu-font\">{displayChar}</span>\n    </div>\n  );\n};\n\nexport default CharacterDisplay;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAM,CAAC,KAAK;EACjD;EACA,MAAMC,gBAAgB,GAAGA,CAACC,IAAI,EAAEF,KAAK,KAAK;IACxC,MAAMG,QAAQ,GAAGD,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC;IACnC,QAAQJ,KAAK;MACX,KAAK,CAAC;QAAE,OAAOK,MAAM,CAACC,YAAY,CAACH,QAAQ,CAAC;MAAG;MAC/C,KAAK,CAAC;QAAE,OAAOE,MAAM,CAACC,YAAY,CAACH,QAAQ,GAAG,CAAC,CAAC;MAAG;MACnD,KAAK,CAAC;QAAE,OAAOE,MAAM,CAACC,YAAY,CAACH,QAAQ,GAAG,CAAC,CAAC;MAAG;MACnD,KAAK,CAAC;QAAE,OAAOE,MAAM,CAACC,YAAY,CAACH,QAAQ,GAAG,CAAC,CAAC;MAAG;MACnD,KAAK,CAAC;QAAE,OAAOE,MAAM,CAACC,YAAY,CAACH,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MAAG;MACnF;QAAS,OAAOP,IAAI;IACtB;EACF,CAAC;EAED,MAAMQ,WAAW,GAAGT,gBAAgB,CAACF,SAAS,EAAEC,KAAK,CAAC;EAEtD,oBACEH,OAAA;IAAKc,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAChCf,OAAA;MAAMc,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEF;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAACC,EAAA,GArBInB,gBAAgB;AAuBtB,eAAeA,gBAAgB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}