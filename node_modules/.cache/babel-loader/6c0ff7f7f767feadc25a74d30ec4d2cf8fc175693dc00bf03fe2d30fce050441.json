{"ast":null,"code":"var _jsxFileName = \"/Users/m1_mini/Git/udihitu-app/src/DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport './DrawingCanvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s(({\n  character,\n  stage,\n  maxStage,\n  characterData\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [fontLoaded, setFontLoaded] = useState(false);\n  const [currentCharacters, setCurrentCharacters] = useState([]);\n  useEffect(() => {\n    const loadFont = async () => {\n      try {\n        await document.fonts.load('120px UDHituAStd-E12');\n        console.log('Font loaded successfully');\n        setFontLoaded(true);\n      } catch (error) {\n        console.error('Font loading failed:', error);\n      }\n    };\n    loadFont();\n  }, []);\n  const shuffleCharacters = useCallback(() => {\n    const chars = characterData[character] || [];\n    console.log('Characters for shuffling:', chars);\n    const shuffled = [...chars].sort(() => Math.random() - 0.5);\n    setCurrentCharacters(shuffled);\n  }, [character, characterData]);\n  useEffect(() => {\n    if (fontLoaded && characterData[character]) {\n      console.log('Current character:', character);\n      console.log('Current stage:', stage);\n      if (stage === 0) {\n        setCurrentCharacters(characterData[character]);\n      } else {\n        shuffleCharacters();\n      }\n    }\n  }, [character, stage, fontLoaded, shuffleCharacters, characterData]);\n  useEffect(() => {\n    if (fontLoaded) {\n      console.log('Redrawing canvas');\n      clearAndRedraw();\n    }\n  }, [character, stage, fontLoaded, currentCharacters]);\n  const clearAndRedraw = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas not found');\n      return;\n    }\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    drawCharacters(context);\n  };\n  const drawCharacters = context => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas not found in drawCharacters');\n      return;\n    }\n    context.font = '120px UDHituAStd-E12';\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    console.log('Drawing characters:', currentCharacters);\n    console.log('Canvas size:', canvas.width, 'x', canvas.height);\n    console.log('Drawing at:', centerX, centerY);\n\n    // まず、全ての文字をグレーで描画\n    context.fillStyle = '#E0E0E0';\n    currentCharacters.forEach(char => {\n      context.fillText(char, centerX, centerY);\n      console.log('Drew gray character:', char);\n    });\n\n    // 次に、現在のステージまでの文字を黒で描画\n    context.fillStyle = '#000000';\n    for (let i = 0; i < stage + 1 && i < currentCharacters.length; i++) {\n      context.fillText(currentCharacters[i], centerX, centerY);\n      console.log('Drew black character:', currentCharacters[i]);\n    }\n  };\n\n  // ... 他のメソッドは変更なし\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drawing-canvas\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 300,\n      height: 300,\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseOut: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current character: \", character]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current stage: \", stage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Max stage: \", maxStage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Characters: \", currentCharacters.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}, \"GO+eFGLW70TTkW3XRr+oIPz7Jjo=\")), \"GO+eFGLW70TTkW3XRr+oIPz7Jjo=\");\n_c2 = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"DrawingCanvas$React.forwardRef\");\n$RefreshReg$(_c2, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","DrawingCanvas","_s","forwardRef","_c","character","stage","maxStage","characterData","ref","canvasRef","isDrawing","setIsDrawing","fontLoaded","setFontLoaded","currentCharacters","setCurrentCharacters","loadFont","document","fonts","load","console","log","error","shuffleCharacters","chars","shuffled","sort","Math","random","clearAndRedraw","canvas","current","context","getContext","clearRect","width","height","drawCharacters","font","textAlign","textBaseline","centerX","centerY","fillStyle","forEach","char","fillText","i","length","className","children","onMouseDown","startDrawing","onMouseMove","draw","onMouseUp","stopDrawing","onMouseOut","fileName","_jsxFileName","lineNumber","columnNumber","join","_c2","$RefreshReg$"],"sources":["/Users/m1_mini/Git/udihitu-app/src/DrawingCanvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport './DrawingCanvas.css';\n\nconst DrawingCanvas = React.forwardRef(({ character, stage, maxStage, characterData }, ref) => {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [fontLoaded, setFontLoaded] = useState(false);\n  const [currentCharacters, setCurrentCharacters] = useState([]);\n\n  useEffect(() => {\n    const loadFont = async () => {\n      try {\n        await document.fonts.load('120px UDHituAStd-E12');\n        console.log('Font loaded successfully');\n        setFontLoaded(true);\n      } catch (error) {\n        console.error('Font loading failed:', error);\n      }\n    };\n    loadFont();\n  }, []);\n\n  const shuffleCharacters = useCallback(() => {\n    const chars = characterData[character] || [];\n    console.log('Characters for shuffling:', chars);\n    const shuffled = [...chars].sort(() => Math.random() - 0.5);\n    setCurrentCharacters(shuffled);\n  }, [character, characterData]);\n\n  useEffect(() => {\n    if (fontLoaded && characterData[character]) {\n      console.log('Current character:', character);\n      console.log('Current stage:', stage);\n      if (stage === 0) {\n        setCurrentCharacters(characterData[character]);\n      } else {\n        shuffleCharacters();\n      }\n    }\n  }, [character, stage, fontLoaded, shuffleCharacters, characterData]);\n\n  useEffect(() => {\n    if (fontLoaded) {\n      console.log('Redrawing canvas');\n      clearAndRedraw();\n    }\n  }, [character, stage, fontLoaded, currentCharacters]);\n\n  const clearAndRedraw = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas not found');\n      return;\n    }\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    drawCharacters(context);\n  };\n\n  const drawCharacters = (context) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('Canvas not found in drawCharacters');\n      return;\n    }\n\n    context.font = '120px UDHituAStd-E12';\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    console.log('Drawing characters:', currentCharacters);\n    console.log('Canvas size:', canvas.width, 'x', canvas.height);\n    console.log('Drawing at:', centerX, centerY);\n\n    // まず、全ての文字をグレーで描画\n    context.fillStyle = '#E0E0E0';\n    currentCharacters.forEach(char => {\n      context.fillText(char, centerX, centerY);\n      console.log('Drew gray character:', char);\n    });\n\n    // 次に、現在のステージまでの文字を黒で描画\n    context.fillStyle = '#000000';\n    for (let i = 0; i < stage + 1 && i < currentCharacters.length; i++) {\n      context.fillText(currentCharacters[i], centerX, centerY);\n      console.log('Drew black character:', currentCharacters[i]);\n    }\n  };\n\n  // ... 他のメソッドは変更なし\n\n  return (\n    <div className=\"drawing-canvas\">\n      <canvas\n        ref={canvasRef}\n        width={300}\n        height={300}\n        onMouseDown={startDrawing}\n        onMouseMove={draw}\n        onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n      />\n      <p>Current character: {character}</p>\n      <p>Current stage: {stage}</p>\n      <p>Max stage: {maxStage}</p>\n      <p>Characters: {currentCharacters.join(', ')}</p>\n    </div>\n  );\n});\n\nexport default DrawingCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}